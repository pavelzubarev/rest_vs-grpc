// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: polygon.proto

package polygon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PolygonService_CalculateArea_FullMethodName = "/polygon.PolygonService/CalculateArea"
)

// PolygonServiceClient is the client API for PolygonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolygonServiceClient interface {
	CalculateArea(ctx context.Context, in *PolygonRequest, opts ...grpc.CallOption) (*PolygonResponse, error)
}

type polygonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolygonServiceClient(cc grpc.ClientConnInterface) PolygonServiceClient {
	return &polygonServiceClient{cc}
}

func (c *polygonServiceClient) CalculateArea(ctx context.Context, in *PolygonRequest, opts ...grpc.CallOption) (*PolygonResponse, error) {
	out := new(PolygonResponse)
	err := c.cc.Invoke(ctx, PolygonService_CalculateArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolygonServiceServer is the server API for PolygonService service.
// All implementations must embed UnimplementedPolygonServiceServer
// for forward compatibility
type PolygonServiceServer interface {
	CalculateArea(context.Context, *PolygonRequest) (*PolygonResponse, error)
	mustEmbedUnimplementedPolygonServiceServer()
}

// UnimplementedPolygonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPolygonServiceServer struct {
}

func (UnimplementedPolygonServiceServer) CalculateArea(context.Context, *PolygonRequest) (*PolygonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateArea not implemented")
}
func (UnimplementedPolygonServiceServer) mustEmbedUnimplementedPolygonServiceServer() {}

// UnsafePolygonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolygonServiceServer will
// result in compilation errors.
type UnsafePolygonServiceServer interface {
	mustEmbedUnimplementedPolygonServiceServer()
}

func RegisterPolygonServiceServer(s grpc.ServiceRegistrar, srv PolygonServiceServer) {
	s.RegisterService(&PolygonService_ServiceDesc, srv)
}

func _PolygonService_CalculateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServiceServer).CalculateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolygonService_CalculateArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServiceServer).CalculateArea(ctx, req.(*PolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolygonService_ServiceDesc is the grpc.ServiceDesc for PolygonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolygonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "polygon.PolygonService",
	HandlerType: (*PolygonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateArea",
			Handler:    _PolygonService_CalculateArea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polygon.proto",
}
